# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Value', 'backprop_r', 'topo_sort']

# %% ../nbs/00_core.ipynb 3
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import math

# %% ../nbs/00_core.ipynb 22
class Value:

    '''Class to hold a scalar number in an object, references of input values/ computational graph for expression. Supports arthmetic operations like addition, multiplications etc...'''

    def __init__(self, data, children=(), op=None,  label="") -> None:
        self.data = data
        self._prev = set(children)
        self.grad = 0  # Grad is initialized to zero Why? It basically says when grad is zero there is no change in output w.r.t current input
        self._backward = lambda: None
        self._op = op
        self.label = label

    def __repr__(self) -> str:
        if self.label: return f"Value({self.label}|data={self.data})"
        else: return f"Value(data={self.data})"
    
    def __add__(self, other):
        '''Protocol to add 2 value objects'''
        if not isinstance(other, Value): other = Value(other)
        out = Value(self.data + other.data, children=(self, other), op="+")

        # Code for chaining back propogation operation
        def _backward():
            '''Todo Job is to take out grad and propogate to self and other'''
            self.grad += 1.0*out.grad
            other.grad += 1.0*out.grad
        out._backward = _backward
        return out

    def __radd__(self, other):
        return self + other

    def __neg__(self):
        # return Value(-self.data, children=self._prev, op=self._op, label=self.label)
        return -1*self
    
    def __sub__(self, other):
        '''Protocol to substract 2 value objects'''
        return self + (-other)
    
    def __mul__(self, other):
        '''Protocal to multiply 2 value objects'''
        if not isinstance(other, Value):
            assert type(other) in [int, float]
            other = Value(other)
        out = Value(self.data*other.data, children=(self, other), op="*")
        def _backward():
            '''Todo Job is to take out grad and propogate to self and other'''
            self.grad += other.data*out.grad
            other.grad += self.data*out.grad
        out._backward = _backward
        return out

    def __pow__(self, other):
        '''Protocal to multiply 2 value objects'''
        assert type(other) in [int, float]
        x = self.data
        # out = Value(x**other, children=(self, Value(other)), op="**")
        out = Value(x**other,children=(self,), op=f"**{other}")
        def _backward():
            '''Todo Job is to take out grad and propogate to self and other'''
            self.grad += other*(x**(other-1))*out.grad
        out._backward = _backward
        return out

    def __rmul__(self, other):
        return self*other
    
    def __truediv__(self, other):
        '''Protocal to divide 2 value objects'''
        # return Value(self.data/other.data, children=(self, other), op="/")
        return self*(other**(-1))
    
    def __floordiv__(self, other):
        '''Protocal to do floor divide of 2 value objects'''
        return Value(self.data//other.data, children=(self, other), op="//")

    def exp(self):
        ''' Implementing exp(x) for a node
        '''
        x = self.data
        t = math.exp(x)
        out = Value(t, children=(self, ), op="e")
        def _backward():
            self.grad += t*out.grad
        out._backward = _backward
        return out

    def sigmoid(self):
        '''Implementing sigmoid as derivation from exp'''
        return self.exp()/(1+self.exp())

    def tanh(self):
        '''Implementing tanh as derivation from exp'''
        return ((self.exp())**2 -1)/((self.exp())**2 + 1)

    # def tanh(self):
    #     ''' Implementing tanh for a node
    #         $$
    #             tanh(x) = \frac{{e^{2x} - 1}}{{e^{2x} + 1}}.
    #         $$
    #     '''
    #     x = self.data
    #     t = (math.exp(2*x)-1)/ (math.exp(2*x)+1)
    #     out = Value(t, children=(self, ), op="tanh")
    #     def _backward():
    #         '''Todo Job is to take out grad and propogate to self and other'''
    #         self.grad += (1- t**2)*out.grad
    #     out._backward = _backward
    #     return out

    def relu(self):
        x = self.data
        t = x if x >0 else 0
        out = Value(t, children=(self, ), op="relu")
        def _backward():
            if x > 0 : self.grad += out.grad
            else: self.grad += 0
        out._backward = _backward
        return out
    

    def backward(self):
        self.grad = 1.0
        topo, _ = topo_sort(self)
        for node in reversed(topo):
            node._backward()
    


# %% ../nbs/00_core.ipynb 55
def backprop_r(root):
    ''' Backpropogation leveraging the _backward method in graph'''
    root._backward()
    for i in root._prev:
        i._backward()
        backprop_r(i)

# %% ../nbs/00_core.ipynb 59
def topo_sort(o):
    topo = []
    visited = set()
    def build_topo(v):
        if v not in visited:
            visited.add(v)
            for child in v._prev:
                build_topo(child)
            topo.append(v)
    build_topo(o)
    return topo, visited
