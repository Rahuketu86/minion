# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Value']

# %% ../nbs/00_core.ipynb 3
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import math

# %% ../nbs/00_core.ipynb 22
class Value:

    '''Class to hold a scalar number in an object, references of input values/ computational graph for expression. Supports arthmetic operations like addition, multiplications etc...'''

    def __init__(self, data, children=(), op=None,  label="") -> None:
        self.data = data
        self._prev = set(children)
        self.grad = 0  # Grad is initialized to zero Why? It basically says when grad is zero there is no change in output w.r.t current input
        self._op = op
        self.label = label

    def __repr__(self) -> str:
        if self.label: return f"Value({self.label}|data={self.data})"
        else: return f"Value(data={self.data})"
    
    def __add__(self, other):
        '''Protocol to add 2 value objects'''
        return Value(self.data + other.data, children=(self, other), op="+")
    
    def __sub__(self, other):
        '''Protocol to substract 2 value objects'''
        return Value(self.data - other.data, children=(self, other), op="-")
    
    def __mul__(self, other):
        '''Protocal to multiply 2 value objects'''
        return Value(self.data*other.data, children=(self, other), op="*")
    
    def __truediv__(self, other):
        '''Protocal to divide 2 value objects'''
        return Value(self.data/other.data, children=(self, other), op="/")
    
    def __floordiv__(self, other):
        '''Protocal to do floor divide of 2 value objects'''
        return Value(self.data//other.data, children=(self, other), op="//")

    def tanh(self):
        ''' Implementing tanh for a node
            $$
                tanh(x) = \frac{{e^{2x} - 1}}{{e^{2x} + 1}}.
            $$
        '''
        x = self.data
        t = (math.exp(2*x)-1)/ (math.exp(2*x)+1)
        return Value(t, children=(self, ), op="tanh")
    

